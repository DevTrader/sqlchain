#!/usr/bin/env python
#
#   sqlchain - upgrade database to support bech32 table and use revised addr id encoding
#
#   This program should be run detached from console (as it is long running) and with output piped to a log file.
#       eg. sudo sqlchain-upgrade-db /etc/bitcoin/sqlchaind.cfg &>>upgrade.log & disown
#
#   Old: addr_id columns had P2SH encoded as odd values, regular addresses as even.
#   New: addr_id columns has P2SH encoded with high bit 41, and high bit 42 for bech32.
#   This may also result in better division of address indices since p2sh are not interleaved with p2pkh.
#
#   Max addr id values and future high bit flags:
#       currently addr ids are decimal(13) which takes 6 bytes and has a maximum value of 9,999,999,999,999 = 0x9184E729FFF
#       only 5 bytes are used from the hashed address so bits above that can be flags, 0x9xxxxxxxxxx allows 3 high bits
#       these are now assigned as: [ 0, bech32, p2sh-p2wsh ]
#   Max txs/block is doubled to 20,000:
#       block.id and trxs.block_id are both decimal(11) which means a max of 99,999,999,999/20,000 or 4,999,999 blocks
#   Max txo/tx is increased from 4096 (12 bits) to 16384 (16 bits):
#       output ids are decimal(16) and tx ids are decimal(13). Actual tx_ids are a 5 byte truncation of the txhash, shifted 3 bits right.
#       Max tx_id (37 bits) 137,438,953,500 giving a max output id 2,251,799,814,000,000 - still within decimal(16) and 7 byte blob id
#
#   Long bech32 hashes (p2wsh) are stored in a new table (bech32) but the short ones (p2wpkh) are in the existing address table.
#
#   This program checks if the bech32 table exists as indicator of past table upgrade which repeating would corrupt.
#
#   Overview:
#       fix address table ids - 2 pass
#       update addr_ids in output table to match - 2 pass
#       update block_ids for new limit
#       update outputs id for new limit
#       add new bech32 table
#       scan blocks since 481,824 (testnet 834,624)(first segwit) and insert any missing addresses, update outputs
#           (fixes missing bech32 and also pkh detection bug in v0.2.2)
#

import os, sys
import MySQLdb as db

from sqlchain.util import dotdict, loadcfg, savecfg, getBlobHdr, decodeVarInt, readBlob, insertAddress, decodeScriptPK, log
from sqlchain.version import MAX_IO_TX, MAX_TX_BLK

__builtins__.sqc = dotdict()  # container for super globals

if len(sys.argv) < 2:
    print "Usage: %s <cfg file path>\n" % sys.argv[0]
    print "Suggest backing up db files first if space available, and then run detached like this:"
    print "\tsudo sqlchain-upgrade-db /etc/bitcoin/sqlchaind.cfg &>>upgrade.log & disown\n"
    sys.exit(0)

sqc.cfg = {}
loadcfg(sqc.cfg)
sqc.cfg['cointype'] = 'testnet' if sqc.cfg['testnet'] else 'bitcoin'

print "\nUpdating cfg for cointype: %s" % sqc.cfg['cointype']
savecfg(sqc.cfg)

sql = db.connect(*sqc.cfg['db'].split(':'))
cur = sql.cursor()
sql2 = db.connect(*sqc.cfg['db'].split(':'))
cur2 = sql2.cursor(db.cursors.SSCursor)

cur.execute("show tables like 'bech32';") # test if old db version and skip upgrade steps if exists
if cur.rowcount == 0:
    log("\nDo not interrupt these steps or ids will be corrupted.\n")

    log("Updating address table - id, step 1/8. ")
    cur.execute("update address set id = if(id%2=0, (id/2)|0x40000000000, (id/2)|0x50000000000);")

    log("Updating address table - mask, step 2/8.")
    cur.execute("update address set id = (id & 0x1FFFFFFFFFF);")

    log("Updating outputs table - addr_id, step 3/8.")
    cur.execute("update outputs set addr_id = if(addr_id%2=0, (addr_id/2)|0x40000000000, (addr_id/2)|0x50000000000);")

    log("Updating outputs table - mask, step 4/8.")
    cur.execute("update outputs set addr_id = (addr_id & 0x1FFFFFFFFFF);")

    log("Updating trxs table - expand txs/block, step 5/8.")
    cur.execute("update trxs set block_id = (block_id/10000*{0} + block_id%10000) where 1 order by block_id desc;".format(MAX_TX_BLK))

    log("Updating outputs table - expand outputs/tx, step 6/8.")
    cur.execute("update outputs set id = (id/4096*{0} + id%4096)|0x10000000000000;".format(MAX_IO_TX))

    log("Updating outputs table - mask, step 7/8.")
    cur.execute("update outputs set id = id&0xFFFFFFFFFFFFF;")

    log("Adding new bech32 table, step 8/8.")
    cur.execute("CREATE TABLE IF NOT EXISTS `bech32` (`id` decimal(13) NOT NULL, `addr` binary(32) NOT NULL, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=latin1;")
else:
    log("Database already upgraded. Skipping to fix up - restart.")

count,first_block = 1,834624 if sqc.cfg['testnet'] else 481824 # first segwit blocks
cur.execute("select count(*) from blocks;")
blks = cur.fetchone()[0]
chunksz = (blks-first_block)/100

try:
    with open('upgrade.state', 'r') as f:
        count,first_block,chunksz = [int(x) for x in next(f).split()]
except IOError:
    pass

log("\nUnknown outputs (like bech32) were stored as zero id.")
log("Scanning zero ids to fix up with new address ids.")
log("\nThis (lengthy) process can be killed/restarted without data corruption.")
log("\nStarting at %d, %d chunks of %d blocks:" % (first_block,101-count,chunksz))
while first_block <= blks:
    fixlist = []
    last_block = first_block + chunksz
    cur2.execute("select o.id,t.txdata,t.ins,t.outs from trxs t left join outputs o on t.id=floor(o.id/%s) where o.addr_id=0 and t.block_id >= %s and t.block_id < %s;", (MAX_IO_TX, first_block*MAX_TX_BLK, last_block*MAX_TX_BLK))
    for oid,txdata,ins,outs in cur2:
        tx_n = oid % MAX_IO_TX
        hdr = getBlobHdr(txdata, sqc.cfg['path'])
        if ins >= 0xC0:
            ins = ((ins&0x3F)<<8) + hdr[1]
        if outs >= 0xC0:
            outs = ((outs&0x3F)<<8) + hdr[2]
        vpos = int(txdata) + hdr[0] + ins*7
        for n in range(ins):
            vsz,off = decodeVarInt(readBlob(vpos, 9, sqc.cfg)) if not hdr[7] else (0,0) # no-sigs flag
            vpos += off+vsz+(0 if hdr[6] else 4)
        for n in range(outs):
            vsz,off = decodeVarInt(readBlob(vpos, 9, sqc.cfg))
            if n == tx_n:
                spk = decodeScriptPK( readBlob(vpos+off, vsz, sqc.cfg) )
                if 'addr' in spk:
                    addr_id = insertAddress(cur, spk['addr'])
                    fixlist.append((addr_id,oid))
                break
            vpos += off+vsz

    log("CHK %02d: %d-%d, %d fixed." % (count,first_block,last_block,len(fixlist)))
    cur.executemany("update outputs set addr_id=%s where id=%s limit 1;", fixlist)
    first_block = last_block
    count += 1

    with open('upgrade.state', 'w') as f:
        f.write('%d %d %d' % (count,first_block,chunksz))

log("Upgrade complete.")
os.unlink('upgrade.state')
